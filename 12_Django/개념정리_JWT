## Django JWT(토큰 기반 인증) 개념 정리

### JWT란 무엇인가요?

JWT(토큰 기반 인증)는 JSON Web Token의 약자입니다. JWT는 정보를 안전하게 전달하기 위한 컴팩트하고 자체적인 방식으로 인증 정보를 표현하는 인터넷 표준입니다. 이는 클라이언트와 서버 간의 인증 및 정보 교환을 안전하게 수행할 수 있도록 돕는 데 사용됩니다.

### JWT의 구성 요소

JWT는 세 가지 부분으로 구성됩니다: 헤더(Header), 페이로드(Payload), 서명(Signature).

1. **헤더(Header)**: 토큰의 유형과 해시 알고리즘 정보가 포함됩니다. 예를 들어, `{"alg": "HS256", "typ": "JWT"}`와 같이 구성됩니다.

2. **페이로드(Payload)**: 토큰에 포함되는 클레임(claim) 정보가 담겨 있습니다. 클레임은 사용자에 대한 정보와 토큰에 대한 추가적인 메타데이터를 포함할 수 있습니다. 이 정보는 Base64 인코딩되어 있으며, 사용자 정의 클레임 외에도 등록된 클레임과 공개 클레임으로 나뉩니다.

3. **서명(Signature)**: 헤더와 페이로드의 내용을 인코딩한 후, 서버의 비밀 키를 사용하여 서명되어 있습니다. 이 서명은 토큰이 변조되었는지 여부를 확인하는 데 사용됩니다.

### Django에서 JWT 사용하기

Django에서 JWT를 사용하여 인증을 구현하려면, `djangorestframework-jwt` 또는 `djangorestframework-simplejwt`와 같은 JWT 패키지를 사용할 수 있습니다.

1. **djangorestframework-jwt**: 이 패키지는 Django REST Framework와 함께 사용되며, 사용자가 제공한 자격 증명을 사용하여 JWT를 생성하고 검증하는 기능을 제공합니다.

2. **djangorestframework-simplejwt**: Django REST Framework용 간단하고 빠른 JWT 구현입니다. 인증 및 토큰 발급을 위한 기본 및 사용자 정의 뷰를 제공합니다.

### JWT 사용의 장점

1. **상태를 저장하지 않음**: 서버는 상태를 저장할 필요가 없으므로 확장성이 향상됩니다.
2. **보안 강화**: 서버는 토큰을 서명하고 검증하기 때문에 토큰이 변경되거나 위조되는 것을 방지할 수 있습니다.
3. **크로스 도메인 요청(CORS) 처리**: JWT는 헤더에 포함되기 때문에 CORS 처리가 쉽습니다.
4. **분산 환경에서의 사용**: JWT는 여러 서비스 간의 통신에 적합하며, 마이크로서비스 아키텍처와 같은 분산 환경에서 사용할 수 있습니다.

### 요약

JWT는 간결하고 안전한 방식으로 사용자 인증 및 정보 교환을 수행하는 데 사용됩니다. Django에서 JWT를 사용하면 빠르고 안전하며 확장 가능한 웹 애플리케이션을 구축할 수 있습니다.
